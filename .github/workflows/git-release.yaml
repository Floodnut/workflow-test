name: Event Git Release

on:
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  hot-fix-release:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-20.04
    
    steps:
    - name: Get latest tag
      id: get-latest-tag
      run: echo "latest_tag=$(echo '$(git describe --tags --abbrev=0)'" >> $GITHUB_OUTPUT

    - name: Print latest tag
      run: echo "Latest tag is ${{ steps.get-latest-tag.outputs.latest_tag }}."
      
    - name: Create Hotfix Release
      id: release
      uses: Floodnut/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        hotfix: true
        latest_latest_tag: ${{ steps.get-latest-tag.outputs.latest_tag }}
        tag_name: ${{ steps.release-tag.outputs.tag }}
        release_name: ${{ steps.release-tag.outputs.tag }}
        body_path: ./git.log.txt
        draft: false
        prerelease: false


  git-release:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' && github.event.pull_request.head.ref == 'develop'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Check PR Merge
        id: check-merge
        run: |
          echo "PR from dev to main has been merged."
          echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV

      - name: Parse version from Merged-PR
        id: release-tag
        run: |
          echo "tag=$(echo '${{ github.event.pull_request.title }}' | egrep -o 'v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}[a-z]{0,2}')" >> $GITHUB_OUTPUT
          echo "major_tag=$(echo '${{ github.event.pull_request.title }}' | egrep -o 'v[0-9]{1,3}\.[0-9]{1,3}\')" >> $GITHUB_OUTPUT

      - name: Get Commits
        id: get-commits
        run: |
          echo "## Changes" > ./git.log.txt
          git log --oneline ${{ github.event.pull_request.base.sha }}...${{ github.sha }} >> ./git.log.txt

      - name: Create Release
        id: release
        uses: Floodnut/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release-tag.outputs.tag }}
          release_name: ${{ steps.release-tag.outputs.tag }}
          body_path: ./git.log.txt
          draft: false
          prerelease: false

      - name: Create Draft Release
        if: ${{ failure() && steps.release.outcome == 'failure' }}
        uses: Floodnut/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: draft_tag
          release_name: draft Release
          body: |
            ## Changes
          draft: true
          prerelease: false
